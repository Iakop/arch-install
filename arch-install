#!/bin/bash
# Arch installation script
# Author: Jacob Bechmann Pedersen
# Date: 2019-07-18

###########################################################################
# Check the environment
###########################################################################

# All the prerequisites (paths, etc.) are defined:

prefix="$(pwd)"
source "$prefix/include/shared"

configexists=false

# Check for an installer config:
if [ -f "$configpath" ]; then 
	if prompt-yn "Found config, would you like to use it?" y; then
		cp "$configpath" "$configinfopath"
		configexists=true
	else
		echo "Creating config in $configinfopath"
	fi
else
	echo "Config not found! Creating config in $configinfopath"
fi

# If the config exists
if $configexists; then
###########################################################################
# Source the config
###########################################################################
source "$configinfopath"

###########################################################################
# Connect to the internet
###########################################################################

# Using nc, the connection to the internet is checked
echo "Checking for internet access..."
dns=8.8.8.8
nc -z -w 30 $dns 53 > /dev/null 2>&1
connectioncheck=$?

if [ $connectioncheck -eq 0 ] 
then
	echo "Connected to the internet!"
else
	echo "There is no connection, please remedy and run script again."
	exit 1
fi
echo

###########################################################################
# Set the system clock
###########################################################################

echo "Timezone will be set to $timezone!"

# Set the system clock
echo "Synchronizing the system clock..."
timedatectl set-ntp true
timedatectl set-timezone $timezone
timedatectl status
echo "Done setting time!"
echo

###########################################################################
# Print the microcode to install
###########################################################################

if [ "${ucodepackages[0]}" != "" ]; then
	echo "The following microcode update packages will be installed:"
	print-list ucodepackages "The following microcode update packages will be installed"
else
	echo "No microcode updates to install!"
fi
echo

###########################################################################
# Scale and partition installation drive:
###########################################################################

echo "Setting up disk partitioning scheme..."
# First the disk is added to the sfdisk command:
instructs="instructs.sfdisk"
instructspath="/tmp/$instructs"
# The label is gpt in this installation, as it supports both EFI and legacy BIOS:
echo "label: gpt" > $instructspath
# The device picked earlier is echoed into the instructions:
echo "device: $installdisk" >> $instructspath
# The units are sectors, and the sector size is found:
echo "unit: sectors" >> $instructspath

# Sectorsize, if that becomes important:
#sectorsize=$(cat /sys/block/$installdisk/queue/hw_sector_size)

# The start of the first partition is for the efivars, or boot sector, so it's dependant on boot type:
# Then, the type of boot is used to configure the first part of the sfdisk command:
if [ "$boot" == "uefi" ]; then
	# Creates an EFI partition:
	echo "${installdisk}1 : start=2048, size=+512MiB, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B" >> $instructspath
else
	# Gives the BIOS GUID to the first partition created:
	echo "${installdisk}1 : start=2048, size=+1MiB, type=21686148-6449-6E6F-744E-656564454649" >> $instructspath
fi

echo "${installdisk}2 : size=+${swapsize}GB, type=0657FD6D-A4AB-43C4-84E5-0933C84B4F4F" >> $instructspath
# Finally, the rest of the disk will be allocated for data:
echo "${installdisk}3 : type=0FC63DAF-8483-4772-8E79-3D69D8477DE4" >> $instructspath

echo "Disk partitioning scheme will be the following:"
cat $instructspath

# Act upon response:
if prompt-yn "Do you want to proceed or abort?" y; then
	echo "Formatting disk!"
	sfdisk $installdisk < $instructspath
else
	echo "Aborting install..."
	rm -f $instructspath
	exit 1
fi
echo

###########################################################################
# Make filesystems and mount them + fstab preview
###########################################################################

echo "Now creating the filesystems..."
if [ "$boot" == "uefi" ]; then
	echo "Creating FAT32 for UEFI on $installdisk1..."
	mkfs.fat -F32 ${installdisk}1
else
	echo "For BIOS boot on GPT, no filesystem is needed on $installdisk1!"
fi

echo "Creating swap on $installdisk2..."
mkswap ${installdisk}2

echo "Creating ext4 filesystem on $installdisk3..."
mkfs.ext4 ${installdisk}3

echo "Mounting filesystems..."
mount ${installdisk}3 /mnt
if [ "$boot" == "uefi" ]; then
	mkdir /mnt/efi
	mount ${installdisk}1 /mnt/efi
fi
swapon ${installdisk}2

echo "Fstab will be the following:"
genfstab -U /mnt
echo

###########################################################################
# Pacstrap
###########################################################################

echo "Downloading reflector..."
pacman -Sy --noconfirm reflector
echo "Generating a pacman mirrorlist..."
reflector --latest 100 --fastest 100 --protocol "https" --score 100 --save /etc/pacman.d/mirrorlist

# Enable multilib:
echo "Enabling multilib..."
linetoedit=$(grep -n "\[multilib\]" /etc/pacman.conf | awk -F ':' '{print $1}')
sed "${linetoedit}s/^#//" /etc/pacman.conf > /tmp/pacman.conf 
linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
sed "${linetoedit}s/^#//" /tmp/pacman.conf > /etc/pacman.conf 

# Enable ILoveCandy and Color
echo "Enabling Color and ILoveCandy..."
linetoedit=$(grep -n "Color" /etc/pacman.conf | awk -F ':' '{print $1}')
sed "${linetoedit}s/^#//" /etc/pacman.conf > /tmp/pacman.conf
cp /tmp/pacman.conf /etc/pacman.conf
grep "ILoveCandy" /etc/pacman.conf
retval=$?
if [ $retval -ne 0 ]; then
	linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
	sed -i "${linetoedit}i\ \nILoveCandy" /etc/pacman.conf
fi
pacman -Sy

echo "Pacstrapping base to / on ${disksavail[$choicenumber]}3 directory..."
pacstrap /mnt ${bootpackages[@]} ${ucodepackages[@]} ${graphicspackages[@]} ${pacpkgs[@]} 
#${aurpkgs[@]} are used after user is made
echo

###########################################################################
# Genfstab
###########################################################################

genfstab -U /mnt >> /mnt/etc/fstab

###########################################################################
# Arch-chroot and install packages from list
###########################################################################

if false; then
# Copy all the files created to the mounted drive:
cp -r "$prefix"/* /mnt/root/

# Arch-chroot into it:
echo "Arch-chrooting into disk..."
arch-chroot /mnt /root/$chrootstep
fi

###########################################################################
# Clean-up 
###########################################################################

echo "Done!"
umount -R /mnt
swapoff ${installdisk}2

fi

# If the config doesn't exist
if ! $configexists; then
###########################################################################
# Check if the machine is virtual
###########################################################################
# Check for virtualization:
hypervisor=$(dmesg | grep "Hypervisor detected") 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	virtualization="$(echo "$hypervisor" | awk -F ': ' '{print $2}')"
	virtualization=${virtualization,,}
	echo "Virtualization is $virtualization"
else
	virtualization="none"
fi

# Check for VM type:
vmcompany=$(dmesg | grep "DMI") 2>&1
retval=$?
if [ $retval -eq 0 ]; then

	echo "$vmcompany" | grep -i "virtualbox" >/dev/null 2>&1
	virtualboxcheck=$?
	echo "$vmcompany" | grep -i "vmware" >/dev/null 2>&1
	vmwarecheck=$?

	if [ $virtualboxcheck -eq 0 ]; then
		vmtype="virtualbox"
		echo "VMtype is $vmtype"
	elif [ $vmwarecheck -eq 0 ]; then
		vmtype="vmware"
		echo "VMtype is $vmtype"
	else
		vmtype="none"
	fi
else
	echo "Error in detecting VMtype!"
fi
echo

# Write the config to config.info
echo "vmtype=$vmtype" > $configinfopath
echo "virtualization=$virtualization" >> $configinfopath

###########################################################################
# Check the boot type:
###########################################################################

# First list the directory with efivars, and check whether they exist:
# Redirect stdout and stderr to /dev/null
echo "Checking boot type..."

declare -a bootpackages

if (ls /sys/firmware/efi/efivars > /dev/null 2>&1); then
	boot="uefi"
	bootpackages+=("efibootmgr")
else
	boot="bios"
fi
echo "Boot type is $boot!"

echo "boot=$boot" >> $configinfopath
# Print the boot packages to the boot package list
echo "bootpackages=(\\" >> $configinfopath
for i in "${!bootpackages[@]}"; do
	echo -e "\t${bootpackages[$i]}\\" >> $configinfopath
done
echo -e "\t)" >> $configinfopath
echo

###########################################################################
# Get timezone preferences
###########################################################################

# Prompt, if user wants to set a timezone:
timezonefound=false
prompt="Would you like to set the clock to a custom timezone?"
while ! $timezonefound; do
	if prompt-yn "Would you like to set the clock to a custom timezone?" y; then
		prompt-txt "Please input the timezone (format: Region/City)" y timezone
	else
		timezone="Europe/Copenhagen"
	fi

	echo "Checking for timezone info..."
	if (ls /usr/share/zoneinfo/$timezone >/dev/null 2>&1) && ! [ "$timezone" == "" ]; then
		echo "Timezone found!"
		timezonefound=true
	else
		echo "Timezone not found!"
		prompt="Would you like to try again?"
	fi
done

# Write the timezone to the config:
echo "timezone=$timezone" >> $configinfopath
echo

###########################################################################
# Detect hardware: CPU
###########################################################################

# Detect the manufacturer of the CPU, to install microcode.
echo "Detecting CPU manufacturer..."

cpunames="$(cat /proc/cpuinfo | grep "model name" | awk -F ': ' '{print "\t" $2}')"
echo "CPU(s) found:"
echo -e "$cpunames"

# Declare an array for needed microcode:
declare -a ucodepackages

echo "$cpunames" | grep -e Intel >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	ucodepackages+=("intel-ucode")
fi

echo "$cpunames" | grep -e AMD >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	ucodepackages+=("amd-ucode")
fi

# Print the ucode packages to the ucode package list
echo "ucodepackages=(\\" >> $configinfopath
for i in "${!ucodepackages[@]}"; do
	echo -e "\t${ucodepackages[$i]}\\" >> $configinfopath
done
echo -e "\t)" >> $configinfopath

print-list ucodepackages "The following microcode update packages are available"
echo

###########################################################################
# Detect hardware: RAM
###########################################################################

echo "Detecting RAM available..."
free -h --giga
ramavail=$(free -h --giga | grep Mem | awk '{gsub("G","")} {printf "%.1f", $2}')
ramavailint=$(echo "$ramavail" | awk '{printf "%d", $1}') 
if [ $ramavailint -ne 0 ]; then
	echo "$ramavail Gigabyte RAM available!"
else
	ramavail=$(free --mega | grep Mem | awk '{printf "%.1f", $2}')
	echo "$ramavail Megabyte RAM available!"
fi
echo "Calculating swapsize based on RAM..."
# Swap is calculated:
swapsize=$(echo "$ramavail" | awk '{printf "%d", $1 * 2}')
echo "Swapsize will be $swapsize GB!"
echo "swapsize=$swapsize" >> $configinfopath
#TODO: Create an alternate scenario, when swap is in MB
echo

###########################################################################
# Detect hardware: Storage
###########################################################################

echo "Checking disks available..."
echo "List of block devices:"
disksavail=($(lsblk | grep disk | awk '{print $1}'))
sizesavail=($(lsblk | grep disk | awk '{print $4}'))

declare -a disksnsizes

for i in "${!disksavail[@]}"; do
	disksnsizes+=("/dev/${disksavail[$i]}::${sizesavail[$i]}")
done

lsblk; echo

prompt-list "Please pick a disk to install on" disksnsizes choicenumber
if [ ! "$choicenumber" == "q" ]; then
	echo "You picked: $choicenumber) /dev/${disksavail[$choicenumber]} with ${sizesavail[$choicenumber]} space!"
	installdisk="/dev/${disksavail[$choicenumber]}"
else
	echo "Aborted configuration! Install cannot be completed without a disk!"
	exit 1
fi

# Write the disk choice to config:
echo "installdisk=$installdisk" >> $configinfopath
echo

###########################################################################
# Detect hardware: Graphics
###########################################################################

echo "Checking for graphics hardware..."
# To get the graphics, two categories are searched using lspci:
devmode="on"
if [ $devmode == "on" ]; then 
	vgacontrollers=$(cat test/testpci | grep VGA | awk -F '"' '{print "\t" $6 " by " $4}')
	dddcontrollers=$(cat test/testpci | grep 3D | awk -F '"' '{print "\t" $6 " by " $4}')
else
	# VGA compatible cards, usually the main:
	vgacontrollers=$(lspci -mm | grep VGA | awk -F '"' '{print "\t" $6 " by " $4}')
	# 3D controllers, usually secondary in a prime setup.
	dddcontrollers=$(lspci -mm | grep 3D | awk -F '"' '{print "\t" $6 " by " $4}')
fi

# Then a check is performed to see if there are occurances in either category:
if [ "$vgacontrollers" != "" ]; then
	echo "Found VGA controllers:"
	echo -e "$vgacontrollers"
fi
if [ "$dddcontrollers" != "" ]; then
	echo "Found 3D controllers:"
	echo -e "$dddcontrollers"
fi

# Declare an array for vendors of 3d accelerated graphics:
declare -a graphicspackages

# Check for different corporations, to provide the drivers:
echo -e "$vgacontrollers" | grep -e NVIDIA | grep -i "GeForce.*[1-9][0-9][0-9][0-9][^0-9]" > /dev/null 2>&1
vgacheck=$?
echo -e "$dddontrollers" | grep -e NVIDIA | grep -i "GeForce.*[1-9][0-9][0-9][0-9][^0-9]" > /dev/null 2>&1
dddcheck=$?
if [ $vgacheck -eq 0 ] || [ $dddcheck -eq 0 ];then
	geforce1000plus=0
else
	geforce1000plus=1
fi

echo -e "$vgacontrollers" | grep -e NVIDIA | grep -i "GeForce.*[6-9][0-9][0-9][^0-9]" > /dev/null 2>&1
vgacheck=$?
echo -e "$dddcontrollers" | grep -e NVIDIA | grep -i "GeForce.*[6-9][0-9][0-9][^0-9]" > /dev/null 2>&1
dddcheck=$?
if [ $vgacheck -eq 0 ] || [ $dddcheck -eq 0 ];then
	geforce600to900=0
else
	geforce600to900=1
fi

echo -e "$vgacontrollers" | grep -e NVIDIA | grep -i "GeForce.*[4-5][0-9][0-9][^0-9]" > /dev/null 2>&1
vgacheck=$?
echo -e "$dddcontrollers" | grep -e NVIDIA | grep -i "GeForce.*[4-5][0-9][0-9][^0-9]" > /dev/null 2>&1
dddcheck=$?
if [ $vgacheck -eq 0 ] || [ $dddcheck -eq 0 ];then
	geforce400to500=0
else
	geforce400to500=1
fi

echo -e "$vgacontrollers" | grep -e NVIDIA | grep -i "GeForce.*[1-3][0-9][0-9][^0-9]" > /dev/null 2>&1
vgacheck=$?
echo -e "$dddcontrollers" | grep -e NVIDIA | grep -i "GeForce.*[1-3][0-9][0-9][^0-9]" > /dev/null 2>&1
dddcheck=$?
if [ $vgacheck -eq 0 ] || [ $dddcheck -eq 0 ];then
	geforce100to300=0
else
	geforce100to300=1
fi

echo -e "$vgacontrollers" | grep -e NVIDIA > /dev/null 2>&1
vgacheck=$?
echo -e "$vgacontrollers" | grep -e NVIDIA > /dev/null 2>&1
dddcheck=$?
if [ $vgacheck -eq 0 ] || [ $dddcheck -eq 0 ];then
	nvidiacheck=0
else
	nvidiacheck=1
fi

# The newer Nvidia drivers will blacklist nouveau, so only one can prevail:
if [ $geforce1000plus -eq 0 ] || [ $geforce600to900 -eq 0 ]; then
	graphicspackages+=("nvidia" "nvidia-utils" "lib32-nvidia-utils" "nvidia-settings")
elif [ $geforce400to500 -eq 0 ]; then
	graphicspackages+=("nvidia-390xx" "nvidia-390xx-utils" "lib32-nvidia-390xx-utils" "nvidia-settings")
elif [ $geforce100to300 -eq 0 ]; then
	graphicspackages+=("xf86-video-nouveau")
fi

# If every other nvidia-check fails, install nouveau as fallback:
if [ $nvidiacheck -eq 0 ] && [ $geforce100to300 -ne 0 ] && [ $geforce1000plus -ne 0 ] && [ $geforce600to900 -ne 0 ] && [ $geforce400to500 -ne 0 ]; then
	oldnvidia=0
	graphicspackages+=("xf86-video-nouveau")
else
	oldnvidia=1
fi

echo -e "$vgacontrollers" | grep -e Intel > /dev/null 2>&1
intelcheck=$?
if [ $intelcheck -eq 0 ]; then
	graphicspackages+=("xf86-video-intel" "vulkan-intel" "lib32-vulkan-intel")
fi

echo -e "$vgacontrollers" | grep -e AMD > /dev/null 2>&1
amdcheck=$?
if [ $amdcheck -eq 0 ]; then
	graphicspackages+=("xf86-video-amdgpu" "vulkan-radeon" "lib32-vulkan-radeon")
fi

echo -e "$vgacontrollers" | grep -e ATI > /dev/null 2>&1
aticheck=$?
if [ $aticheck -eq 0 ]; then
	graphicspackages+=("xf86-video-ati")
fi

echo -e "$vgacontrollers" | grep -e VMware > /dev/null 2>&1
vmwaresvgacheck=$?
if [ $vmwaresvgacheck -eq 0 ]; then
	graphicspackages+=("xf86-video-vmware")
fi

# Check for common drivers to be installed:
if [ $intelcheck -eq 0 ] || [ $amdcheck -eq 0 ] || [ $aticheck -eq 0 ] || [ $oldnvidia -eq 0 ] || [ $geforce100to300 -eq 0 ] || [ $vmwaresvgacheck -eq 0 ]; then
	graphicspackages+=("mesa" "lib32-mesa")
fi
# Check for common vulkan-icd-loader to be installed:
if [ $intelcheck -eq 0 ] || [ $amdcheck -eq 0 ] || [ $aticheck -eq 0 ] || [ $nvidiacheck -eq 0 ] || [ $vmwaresvgacheck -eq 0 ]; then
	graphicspackages+=("vulkan-icd-loader" "lib32-vulkan-icd-loader")
fi

# Check for nvidia prime compatible 3d controllers:
echo -e "$dddcontrollers" | grep -e NVIDIA > /dev/null 2>&1
if [ $? -eq 0 ]; then
	# If available, ask if bumblebeee support is wanted:
	if prompt-yn "Seems like NVidia PRIME might be available. Would you like to install bumblebee support?" y; then
		graphicspackages+=("bumblebee" "bbswitch" "lib32-virtualgl" "primus_vk")
	fi
fi

# Print the graphics packages to the graphics package list
echo "graphicspackages=(\\" >> $configinfopath
for i in "${!graphicspackages[@]}"; do
	echo -e "\t${graphicspackages[$i]}\\" >> $configinfopath
done
echo -e "\t)" >> $configinfopath

if [ "${graphicspackages[0]}" != "" ]; then
	print-list graphicspackages "The following graphics driver packages will be installed"
else
	echo "No graphics drivers to install!"
fi
echo

###########################################################################
# Prompt for package collections
###########################################################################
# Prompt for user to select package collections from the packages directory:
echo "Parsing package lists... Please select the packages you want in this installation!"
pick-pkg-lists $packagespath pacpkgs aurpkgs

# Print the packages to config:
echo "pacpkgs=(\\" >> $configinfopath
for i in "${!pacpkgs[@]}"; do
	echo -e "\t${pacpkgs[$i]}\\" >> $configinfopath
done
echo -e "\t)" >> $configinfopath

echo "aurpkgs=(\\" >> $configinfopath
for i in "${!aurpkgs[@]}"; do
	echo -e "\t${aurpkgs[$i]}\\" >> $configinfopath
done
echo -e "\t)" >> $configinfopath
echo

###########################################################################
# Done!
###########################################################################
echo "Done!"
echo "$configinfo written to $configinfopath!"
if prompt-yn "Would you like to copy to the working directory as config to use?" y; then
	cp "$configinfopath" "$(pwd)/config"
fi


fi