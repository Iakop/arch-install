#!/bin/bash

###########################################################################
# Connect to the internet
###########################################################################

# Using nc, the connection to the internet is checked
echo "Checking for internet access..."
dns=8.8.8.8
nc -z -w 30 $dns 53 > /dev/null 2>&1
connectioncheck=$?

if [ $connectioncheck -eq 0 ] 
then
	echo "Connected to the internet!"
else
	echo "There is no connection, please remedy and run script again."
	exit 1
fi
echo

###########################################################################
# Set the system clock
###########################################################################

# Prompt, if user wants to set a timezone:
echo "Would you like to set the clock to a custom timezone? [Y/n]: "
# Check for input:
read response
if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
	timezoneselect="custom"

elif [ "${response,,}" == "n" ]; then
	timezoneselect="default"
else
	echo "I did not understand that, please try again!"
fi

tzexit=1
while [ $tzexit -eq 1 ] && [ $timezoneselect == "custom" ]; do
	# Prompt for user specified timezone info:
	echo "Please input the timezone (format: Region/City): "
	read tzresponse
	echo "Checking for timezone info..."
	ls /usr/share/zoneinfo/$tzresponse >/dev/null 2>&1
	timezonecheck=$?
	# If the timezone exists, then link it:
	if [ $timezonecheck -eq 0 ] && [ "$tzresponse" != "" ]; then
		echo "Timezone found!"
		tzexit=0
	# Else ask if the user wants to try again:
	else
		echo "Timezone info not found, would you like to try again? [Y/n]: "
		# Check for input:
		validresponse=1
		while [ $validresponse -eq 1 ]; do
			read response
			if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
				validresponse=0
				timezoneselect="custom"
				
			elif [ "${response,,}" == "n" ]; then
				validresponse=0
				timezoneselect="default"
				tzexit=0
			else
				echo "I did not understand that, please try again!"
			fi
		done
	fi
done

# Apply changes to timezone as requested:
if [ $timezoneselect == "custom" ]; then
	echo "Linking to system timezone..."
	ln -sf /usr/share/zoneinfo/$tzresponse /etc/localtime
	echo "Done!"
elif [ $timezoneselect == "default" ]; then
	echo "Timezone will be set to default!"
	tzresponse="UTC"
fi

# Set the system clock
echo "Synchronizing the system clock..."
timedatectl set-ntp true
timedatectl set-timezone $tzresponse
# Sleep 2 seconds to allow ntp service to start
#sleep 2
timedatectl status
echo "Done setting time!"
echo

###########################################################################
# Check the boot type:
###########################################################################

# First list the directory with efivars, and check whether they exist:
# Redirect stdout and stderr to /dev/null
echo "Checking boot type..."
ls /sys/firmware/efi/efivars > /dev/null 2>&1
efivarscheck=$?

if [ $efivarscheck -eq 2 ] 
then
	echo "The system uses BIOS boot!"
elif [ $efivarscheck -eq 0 ]
then
	echo "The system uses UEFI boot!"
fi
echo

###########################################################################
# Detect hardware: RAM
###########################################################################

echo "Detecting RAM available..."
free -h --giga
ramavail=$(free -h --giga | grep Mem | awk '{gsub("G","")} {printf "%.1f", $2}')
ramavailint=$(echo "$ramavail" | awk '{printf "%d", $1}') 
if [ $ramavailint -ne 0 ]; then
	echo "$ramavail Gigabyte RAM available!"
else
	ramavail=$(free --mega | grep Mem | awk '{printf "%.1f", $2}')
	echo "$ramavail Megabyte RAM available!"
fi
echo

###########################################################################
# Detect hardware: Storage
###########################################################################

echo "Checking disks available..."
echo "List of block devices:"
disksavail=($(lsblk | grep disk | awk '{print $1}'))
sizesavail=($(lsblk | grep disk | awk '{print $4}'))

lsblk; echo

echo "Please pick a disk to install on:"
for i in "${!disksavail[@]}"
do
	echo -e "\t$i) /dev/${disksavail[$i]} ${sizesavail[$i]}"
done
echo -e "\tq) Abort install"

# Check for input:
validresponse=1
while [ $validresponse -eq 1 ]; do
	read response
	# Check if response is a number, and the number index exists within the options:
	if [ $response -eq $response ] 2> /dev/null && [ "${disksavail[${response}]+y}" == "y" ]; then
		validresponse=0
		choicenumber=$response
		
	elif [ "${response,,}" == "q" ]; then
		echo "Aborting install!"
		exit 1
	else
		echo "I did not understand that, please try again!"
	fi
done
echo "You picked: $choicenumber) /dev/${disksavail[$choicenumber]} with ${sizesavail[$choicenumber]} space!"
echo

###########################################################################
# Detect hardware: Graphics
###########################################################################

# To get the graphics, two categories are searched using lspci:
testingmode="on"
if [ $testingmode == "on" ]; then 
	vgacontrollers=$(cat testpci | grep VGA | awk -F '"' '{print "\t" $6 " by " $4}')
	dddcontrollers=$(cat testpci | grep 3D | awk -F '"' '{print "\t" $6 " by " $4}')
else
	# VGA compatible cards, usually the main:
	vgacontrollers=$(lspci -mm | grep VGA | awk -F '"' '{print "\t" $6 " by " $4}')
	# 3D controllers, usually secondary in a prime setup.
	dddcontrollers=$(lspci -mm | grep 3D | awk -F '"' '{print "\t" $6 " by " $4}')
fi

# Then a check is performed to see if there are occurances in either array:
echo "Found VGA controllers:"
echo -e "$vgacontrollers"
echo "Found 3D controllers:"
echo -e "$dddcontrollers"

# Declare an array for vendors of 3d accelerated graphics:
declare -a graphicsdrivers

# Check for different corporations, to provide the drivers:
echo -e "$vgacontrollers" | grep -e NVIDIA > /dev/null 2>&1
if [ $? -eq 0 ]; then
	graphicsdrivers+=("nvidia" "nvidia-utils" "lib32-nvidia-utils")
fi

echo -e "$vgacontrollers" | grep -e Intel > /dev/null 2>&1
if [ $? -eq 0 ]; then
	graphicsdrivers+=("xf86-video-intel")
fi

echo -e "$vgacontrollers" | grep -e AMD > /dev/null 2>&1
if [ $? -eq 0 ]; then
	graphicsdrivers+=("xf86-video-amdgpu")
fi

echo -e "$vgacontrollers" | grep -e ATI > /dev/null 2>&1
if [ $? -eq 0 ]; then
	graphicsdrivers+=("xf86-video-ati")
fi

echo -e "$vgacontrollers" | grep -e ATI -e AMD -e Intel > /dev/null 2>&1
if [ $? -eq 0 ]; then
	graphicsdrivers+=("mesa" "lib32-mesa")
fi

# Check for nvidia prime compatible 3d controllers:
echo -e "$dddcontrollers" | grep -e NVIDIA > /dev/null 2>&1
if [ $? -eq 0 ]; then
	# If available, ask if bumblebeee support is wanted:
	echo "Seems like NVidia PRIME might be available. Would you like to install bumblebee support? [Y/n]:"
	read response
	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		bumblebeesupport="yes"
		echo "Bumblebee support will be installed!"
	elif [ "${response,,}" == "n" ]; then
		bumblebeesupport="no"
		echo "Bumblebee support will not be installed!"
	else
		echo "I did not understand that, please try again!"
	fi
	if [ $bumblebeesupport == "yes" ]; then
		graphicsdrivers+=("bumblebee" "lib32-virtualgl")
	fi
fi

# Installing following graphics drivers:
echo "The following graphics drivers will be installed:"
for driver in "${!graphicsdrivers[@]}"
do
	echo -e "\t${graphicsdrivers[$driver]}"
done

###########################################################################
# Scale and partition installation drive:
###########################################################################

# First the disk is added to the sfdisk command:
instructs="/tmp/instructs.sfdisk"
# The label is gpt in this installation, as it supports both EFI and legacy BIOS:
echo "label: gpt" > $instructs
# The device picked earlier is echoed into the instructions:
echo "device: /dev/${disksavail[$choicenumber]}" >> $instructs
# The units are sectors, and the sector size is found:
echo "unit: sectors" >> $instructs
# TODO: Unsure whether this needs to be used, but let's keep it for now.
sectorsize=$(cat /sys/block/${disksavail[$choicenumber]}/queue/hw_sector_size)

# The start of the first partition is for the efivars, or boot sector, so it's dependant on boot type:

cat /tmp/instructs.sfdisk

# Then, the type of boot is used to configure the first part of the sfdisk command:
if [ $efivarscheck -eq 2 ] 
then
	diskpartitions+=
elif [ $efivarscheck -eq 0 ]
then
	echo "The system uses UEFI boot!"
fi

