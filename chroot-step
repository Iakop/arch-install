#!/bin/bash
# Arch installation chroot step
# Author: Jacob Bechmann Pedersen
# Date: 2019-08-28

###########################################################################
# Check the environment
###########################################################################

# All the prerequisites (paths, etc.) are defined:
prefix="/root"
source "$prefix/include/shared"

# Check for environment variables:
cat $envinfopath | grep VMTYPE >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	vmtype="$(cat $envinfopath | grep VMTYPE | awk -F '=' '{print $2}')"
	echo "VMTYPE IS $vmtype"
else
	vmtype="off"
fi

cat $envinfopath | grep VIRTUALIZATION >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	virtualization="$(cat $envinfopath | grep VIRTUALIZATION | awk -F '=' '{print $2}')"
	echo "VIRTUALIZATION IS $virtualization"
else
	virtualization="off"
fi

cat $envinfopath | grep DEVMODE >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	devmode="$(cat $envinfopath | grep DEVMODE | awk -F '=' '{print $2}')"
	echo "DEVMODE IS $devmode"
else
	devmode="off"
fi

# To indicate that the chroot-step succeded:
echo "Hello from $(pwd)!"
echo

###########################################################################
# Set the timezone from info given in previous step 
###########################################################################

# Apply timezone info
echo "Applying timezone info..."
if [ -f $tzinfopath ]; then
	ln -sf $(cat $tzinfopath) /etc/localtime
	# Run hwclock to generate /etc/adjtime:
	hwclock --systohc
else
	echo "Missing timezone info! Aborting..."
	exit 1
fi

# Apply locale info
# For me this will always be english, nothing else:
echo "Applying locale..."
#FIXME: There should be a more elegant way to make sed remove comment char:
sed 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen > /tmp/locale.gen 
sed 's/#da_DK.UTF-8 UTF-8/da_DK.UTF-8 UTF-8/' /tmp/locale.gen > /etc/locale.gen
rm /tmp/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo

###########################################################################
# Set keyboard type. For now, always to danish
###########################################################################

# Set keyboard type:
keyboardtype="dk-latin1"
echo "Setting keyboard layout to $keyboardtype"
echo "KEYMAP=$keyboardtype" > /etc/vconsole.conf
echo

###########################################################################
# Set the hostname to users preference 
###########################################################################

# Prompt for hostname:
proceed="no"
while [ $proceed == "no" ]; do
	read -p "Please enter the name of the computer: " hostname
	
	if [ $devmode == "on" ]; then
		hostname="$devhostname"
	fi

	proceed="retry"
	while [ $proceed == "retry" ]; do
		echo -e "Is the name \"$hostname\" okay? [Y/n]:"
		read response

		if [ $devmode == "on" ]; then
			response="y"
		fi

		if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
			proceed="yes"
		elif [ "${response,,}" == "n" ]; then
			proceed="no"		
		else
			echo "I did not understand that, please try again!"
			proceed="retry"
		fi
	done
done

# Configure the hostname:
echo "Writing hostname to /etc/hostname..."
echo "$hostname" > /etc/hostname

echo "Writing hostname to /etc/hosts..."
echo "# Static table lookup for hostnames." > /etc/hosts
echo "# See hosts(5) for details." >> /etc/hosts
echo -e "127.0.0.1\tlocalhost" >> /etc/hosts
echo -e "::1\t\tlocalhost" >> /etc/hosts
echo -e "127.0.1.1\t$hostname.localdomain\t$hostname" >> /etc/hosts

echo "Done!"
echo

###########################################################################
# TIME TO INSTALL PACKAGES! 
###########################################################################

echo "TIME TO INSTALL PACKAGES!"
# First, the proper package repositories must be setup.

echo "Getting the newest mirrorlist..."
# Get the latest mirrorlist, with all, ranked best dl speed highest:
curl "https://www.archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on" > /etc/pacman.d/mirrorlist
# Remove comments on mirrorlist:
sed 's/^#//' /etc/pacman.d/mirrorlist > /tmp/mirrorlist
cp /tmp/mirrorlist /etc/pacman.d/mirrorlist

# Enable multilib:
echo "Enabling multilib..."
linetoedit=$(grep -n "\[multilib\]" /etc/pacman.conf | awk -F ':' '{print $1}')
sed "${linetoedit}s/^#//" /etc/pacman.conf > /tmp/pacman.conf 
linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
sed "${linetoedit}s/^#//" /tmp/pacman.conf > /etc/pacman.conf 

# Enable ILoveCandy and Color
echo "Enabling Color and ILoveCandy..."
linetoedit=$(grep -n "Color" /etc/pacman.conf | awk -F ':' '{print $1}')
sed "${linetoedit}s/^#//" /etc/pacman.conf > /tmp/pacman.conf
cp /tmp/pacman.conf /etc/pacman.conf

grep "ILoveCandy" /etc/pacman.conf
retval=$?
if [ $retval -ne 0 ]; then
	linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
	sed -i "${linetoedit}i\ \nILoveCandy" /etc/pacman.conf
fi

# Would you like to add sublime repo to pacman.conf:
proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to add the sublime-text repo to /etc/pacman.conf? [Y/n]:"
	read response

	if [ $devmode == "on" ]; then
		response="y"
	fi

	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

if [ $proceed == "yes" ]; then

	# Install sublime key:
	curl -O https://download.sublimetext.com/sublimehq-pub.gpg && pacman-key --add sublimehq-pub.gpg && pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg

	linetoedit=$(grep -n "\[multilib\]" /etc/pacman.conf | awk -F ':' '{print $1}')
	linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 2}')

	# Check if it is already written to the config:
	grep "\[sublime-text\]" /etc/pacman.conf >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
		sed -i "${linetoedit}i\ \n[sublime-text]\nServer = https://download.sublimetext.com/arch/stable/x86_64" /etc/pacman.conf
	fi

	installsublime="yes"

else
	installsublime="no"
fi
echo

# Then update the pacman repos:
echo "Updating the pacman repos..."
pacman -Syu
echo

# Create blank toinstall.list:
echo "" > /tmp/toinstall.list
echo "" > /tmp/toinstallaur.list

echo "Parsing packages in $packageslistpath..."
packagecategories=$(cat $packageslistpath | grep -n "^## .*#")
categorylines=($(echo "$packagecategories" | awk -F ":" '{print $1}'))
categorynames=($(echo "$packagecategories" | tr -d "#" | awk -F ": " '{print $2}' | tr -d " "))

# Check whether the category is wanted, or if is BEGIN or END category:
for i in "${!categorynames[@]}"; do
	if [ "${categorynames[$i]}" == "BEGIN" ] || [ "${categorynames[$i]}" == "END" ]; then
		continue
	
	elif [ "${categorynames[$i]}" == "VirtualBox-Host" ] && [ "$vmtype" == "virtualbox" ]; then
		echo "The machine is VirtualBox guest, skipping host packages..."
		continue

	elif [ "${categorynames[$i]}" == "VirtualBox-Guest" ] && [ "$vmtype" == "none" ]; then
		echo "The machine is real, skipping VirtualBox guest packages..."
		continue

	else
		# Add the packages listed to their appropriate lists:
		startline=$(echo "${categorylines[$i]}" | awk '{print $1 + 1}')
		endline=$(echo "${categorylines[$i+1]}" | awk '{print $1 - 1}')
		pkgs=$(sed -n "${startline},${endline}p" $packageslistpath)
		regpkgs=$(echo "$pkgs" | grep "^[^\!]" | tr ' ' '\n')
		aurpkgs=$(echo "$pkgs" | grep "^!" | tr ' ' '\n' | sed 's/^\!//')
		proceed="retry"
		# Output the list:
		echo "Following packages are in ${categorynames[$i]}:"
		echo
		echo "Pacman:"
		echo "$regpkgs" | sed 's/^/\t/'
		echo "AUR:"
		echo "$aurpkgs" | sed 's/^/\t/'
		# Would you like to install the packages?
		while [ $proceed == "retry" ]; do
			echo -n "Would you like to install the packages? [Y/n]: "
			read response

			if [ $devmode == "on" ]; then
				if [ ${categorynames[$i]} == "System" ] || [ ${categorynames[$i]} == "Remote-access" ]\
				 || [ ${categorynames[$i]} == "Networking" ] || [ ${categorynames[$i]} == "Hardware-drivers" ]\
				 || [ ${categorynames[$i]} == "Terminal" ] || [ ${categorynames[$i]} == "Systray" ]\
				 || [ ${categorynames[$i]} == "Fonts" ] || [ ${categorynames[$i]} == "Windowmanager" ]\
				 || [ ${categorynames[$i]} == "Audio" ] || [ ${categorynames[$i]} == "Ricing" ]\
				 || [ ${categorynames[$i]} == "VirtualBox-Host" ] || [ ${categorynames[$i]} == "VirtualBox-Guest" ]; then
					response="y"
				else
					response="n"
				fi
			fi

			if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
				proceed="yes"
			elif [ "${response,,}" == "n" ]; then
				proceed="no"		
			else
				echo "I did not understand that, please try again!"
				proceed="retry"
			fi
		done
		if [ $proceed == "yes" ]; then
			# Keeps track if any packages should be installed at all:
			installpackages="yes"
			echo "$regpkgs" >> /tmp/toinstall.list
			echo "$aurpkgs" >> /tmp/toinstallaur.list
		fi
	fi
done

# Several checks are performed for NEEDED packages:
# Check if any microcode updates are needed:
if [ -f $ucodelistpath ]; then
	cat "$ucodelistpath" >> /tmp/toinstall.list
fi
# Check if any graphics drivers are needed:
if [ -f $graphicsinstallpath ]; then
	cat "$graphicsinstallpath" >> /tmp/toinstall.list
fi
# Check if sublime is needed:
if [ $installsublime == "yes" ]; then
	installpackages="yes"
	echo -e "\nsublime-text" >> /tmp/toinstall.list
fi

# If any packages at all are needed:
if [ $installpackages == "yes" ]; then
	# Time to install the programs!
	echo "Installing packages from pacman repos:"
	pacman -S --needed --noconfirm - < /tmp/toinstall.list
fi
echo

###########################################################################
# Add the first user: 
###########################################################################

proceed="no"
while [ $proceed == "no" ]; do
	echo -n "Add the first user. Please enter the username: "
	read username

	if [ $devmode == "on" ]; then
		username="$devusername"
	fi

	proceed="retry"
	while [ $proceed == "retry" ]; do
		echo -e "Is the name \"$username\" okay? [Y/n]:"
		read response

		if [ $devmode == "on" ]; then
			response="y"
		fi

		if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
			proceed="yes"
		elif [ "${response,,}" == "n" ]; then
			proceed="no"		
		else
			echo "I did not understand that, please try again!"
			proceed="retry"
		fi
	done
done

# The groups the user will be added to by default:
groups="wheel,ftp,games,http,log,rfkill,sys,systemd-journal,users,uucp"
echo "The user will be added to the following default groups:"
echo -e "\t$(sed 's/,/\n\t/g' <<< $groups)"
echo

# Checks will be performed for extra groups to add the user to:
extragroups=""
echo "Checking for extra groups to add user to..."
# If bumblebee is installed, the user must be added to the group:
pacman -Qs bumblebee >/dev/null 2<&1
bumblebeecheck=$?
if [ $bumblebeecheck -eq 0 ]; then
	extragroups+=",bumblebee"
else
	extragroups+=""
fi
echo -n "The user will be added to the following extra groups:"
echo -e "$(sed 's/,/\n\t/g' <<< $extragroups)"
echo

echo "Now creating user $username..."
useradd -m -U -G $groups$extragroups -s /bin/bash $username
# until the passwd returns 0, prompt the user:
echo "Setting password for $username..."
retval=10
while [ $retval -ne 0 ]; do
	if [ $devmode == "on" ]; then
		echo "DEVMODE, password is: hunter2"
		yes hunter2 | passwd $username
		retval=$?
	else
		passwd $username
		retval=$?
	fi
done
echo

echo "Applying privileges in the sudoers file..."
# Give the privileges in the sudoers file:
pacman -Qs sudo >/dev/null 2>&1
sudoretval=$?
if [ $sudoretval -eq 0 ]; then
	grep "%wheel ALL=(ALL) ALL" /etc/sudoers >/dev/null 2>&1
	retval=$?
	if [ $retval -eq 0 ]; then
		linetoedit=$(grep -n "%wheel ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | awk -F ':' '{print $1}')
		sed "${linetoedit}s/^# //" /etc/sudoers > /tmp/sudoers
		cp /tmp/sudoers /etc/sudoers
	else
		echo "Manual visudo needed to give wheel rights..."
		# For ensuring the user reads the reasoning, sleep 2:
		sleep 2
		visudo
	fi
else
	echo "sudo not installed!"
fi

echo "Please enter password for root..."
retval=10
while [ $retval -ne 0 ]; do
	if [ $devmode == "on" ]; then
		echo "DEVMODE, password is: hunter2"
		yes hunter2 | passwd
		retval=$?
	else
		passwd
		retval=$?
	fi
done
echo

###########################################################################
# Add AUR helper and AUR packages: 
###########################################################################

proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to install the AUR helper pikaur, and AUR packages? [Y/n]:"
	read response
	
	if [ $devmode == "on" ]; then
		response="y"
	fi

	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

# Install pikaur
if [ $proceed == "yes" ]; then
	# Check for git on the machine, if not present, install it.
	pacman -Qs git >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing git..."
		pacman -S git --noconfirm
	fi
	echo "Building pikaur AUR helper as $username..."
	(cd /tmp; sudo -u $username git clone https://aur.archlinux.org/pikaur.git; cd /tmp/pikaur; sudo -u $username makepkg -fsri --noconfirm)
	# Install aur packages:
	# First, search for keys. THe responsibility of providing key info lies within the package folder.
	# The keys needed for a certain AUR package is the first field, and the second is the key itself.
	
	# Try to get the newest key from each mail:
	keys=($(tr ' ' ',' < $aurkeyspath))
	for key in "${keys[@]}"; do
		package=$(echo "$key" | awk -F ',' '{print $1}')
		grep $package /tmp/toinstallaur.list >/dev/null 2>&1
		retval=$?

		if [ $retval -eq 0 ]; then
			echo "Adding key $package..."
			keyid=$(echo "$key" | awk -F ',' '{print $2}')
			sudo -u $username gpg --recv-keys $keyid
		else
			echo "Package for key $package is not specified to be installed!"
		fi
	done

	# Switch to user, and get the packages with pikaur:
	# WARNING, this will take time to build.
	sudo -u $username pikaur -S --needed --noconfirm $(tr '\n' ' ' < /tmp/toinstallaur.list)
fi

# Give normal wheel/sudo permissions, requiring passwords back:
grep "%wheel ALL=(ALL) ALL" /etc/sudoers >/dev/null 2>&1
retval=$?
if [ $retval -eq 0 ]; then
	linetoedit=$(grep -n "%wheel ALL=(ALL) NOPASSWD: ALL" /etc/sudoers | awk -F ':' '{print $1}')
	sed "${linetoedit}s/^/# /" /etc/sudoers > /tmp/sudoers
	linetoedit=$(grep -n "%wheel ALL=(ALL) ALL" /etc/sudoers | awk -F ':' '{print $1}')
	sed "${linetoedit}s/^# //" /tmp/sudoers > /etc/sudoers
else
	echo "Manual visudo needed to give normal wheel rights..."
	# For ensuring the user reads the reasoning, sleep 2:
	sleep 2
	visudo
fi

echo

###########################################################################
# Create configurations for the packages that need it 
###########################################################################

proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to run the configuration scripts in $configscriptspath? [Y/n]:"
	read response

	if [ $devmode == "on" ]; then
		response="y"
	fi

	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

# All the configurations are run as root,
# only sudoing into another user if user specific actions are to be taken.
configscripts=($(ls $configscriptspath))
if [ $proceed == "yes" ]; then
	for config in "${configscripts[@]}"; do
		echo "Running configuration $config..."
		$configscriptspath/$config
	done	
fi
echo


###########################################################################
# Apply custom MIME application defaults system-wide 
###########################################################################

# The applications will overwrite the applications already on the machine, but back up the ones replaced:
echo "Applying custom application defaults..."
applications=($(ls $applicationspath))
for application in "${applications[@]}"; do
	if [ -f /usr/share/applications/$application ]; then
		# Check if the application default already matches the custom default:
		diff $applicationspath/$application /usr/share/applications/$application >/dev/null 2>&1
		retval=$?
		if [ $retval -eq 0 ]; then
			echo "The application default for $application is already identical to custom default!"
		else
			echo "Creating backup of old $application in /usr/share/applications/$application.bak..."
			mv /usr/share/applications/$application /usr/share/applications/$application.bak
			echo "Placing custom default for $application... in /usr/share/applications/$application..."
			cp $applicationspath/$application /usr/share/applications/$application
		fi
	else
		echo "Placing custom default for $application... in /usr/share/applications/$application..."
		cp $applicationspath/$application /usr/share/applications/$application
	fi
done
echo

###########################################################################
# Apply dotfiles to user 
###########################################################################
# TODO: These installs can be merged into one for each in a list of repos!

# The dotfiles repo is cloned to tmp:
proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to install the iakop dotfiles? [Y/n]:"
	read response

	if [ $devmode == "on" ]; then
		response="y"
	fi

	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

# Install dotfiles
if [ $proceed == "yes" ]; then
	# Check for git on the machine, if not present, install it.
	pacman -Qs git >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing git..."
		pacman -S --noconfirm git
	fi
	echo "Installing dotfiles for $username..."
	(cd /tmp; sudo -u $username git clone https://github.com/iakop/dotfiles; cd /tmp/dotfiles; sudo -u $username /tmp/dotfiles/install)
fi
echo

###########################################################################
# Install custom linux-scripts for user 
###########################################################################
# TODO: These installs can be merged into one for each in a list of repos!

# The linux-scripts repo is cloned to tmp:
proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to install the iakop linux-scripts? [Y/n]:"
	read response

	if [ $devmode == "on" ]; then
		response="y"
	fi

	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

# Install linux-scripts
if [ $proceed == "yes" ]; then
	# Check for git on the machine, if not present, install it.
	pacman -Qs git >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing git..."
		pacman -S --noconfirm git
	fi
	echo "Installing linux-scripts for $username..."
	(cd /tmp; sudo -u $username git clone https://github.com/iakop/linux-scripts; cd /tmp/linux-scripts; sudo -u $username /tmp/linux-scripts/install)
fi
echo

###########################################################################
# Generate initramfs 
###########################################################################

echo "Generating initramfs..."
mkinitcpio -p linux

###########################################################################
# Install grub and config it 
###########################################################################

boottype=$(cat $bootinfopath)
if [ $boottype == "bios" ]; then
	echo "Installing grub for BIOS boot..."
	
	# Check for grub, it is needed.
	# If it's not available, install it:
	pacman -Qs grub >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing grub..."
		pacman -S --noconfirm grub
	fi

	# Run grub-install on the current drive:
	grub-install --target=i386-pc $(cat $diskinfopath)
	grub-mkconfig -o /boot/grub/grub.cfg
	echo "Done!"
elif [ $boottype == "uefi" ]; then
	efipartition="/efi"
	echo "Installing grub for UEFI boot..."
	
	# Check for grub, it is needed.
	# If it's not available, install it:
	pacman -Qs grub >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing grub..."
		pacman -S --noconfirm grub
	fi
	# Similarly, check for efibootmgr:
	pacman -Qs efibootmgr >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		echo "Installing grub..."
		pacman -S --noconfirm efibootmgr
	fi
	
	# grub-install runs with --removable option. This "just works".
	# Unsure whether there is a better way of doing this.
	# Run grub install on the uefi partition:
	grub-install --target=x86_64-efi --efi-directory=$efipartition --bootloader-id=GRUB --removable
	grub-mkconfig -o /boot/grub/grub.cfg
	echo "Done!"
else
	echo "Boot type not supported! ...Yet."
	echo "Bootloader must be installed manually!"
fi
