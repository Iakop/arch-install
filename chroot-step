#!/bin/bash

devmode="on"
devpc="devpc"
testingmode="off"

# To indicate that the chroot-step succeded:
echo "Hello from $(pwd)!"
echo

tzinfo="tz.info"
tzinfopath="/root/info/$tzinfo"
packageslist="packages.list"
packageslistpath="/root/packages/$packageslist"
aurpackageslist="aur-packages.list"
aurpackageslistpath="/root/packages/$aurpackageslist"

###########################################################################
# Set the timezone from info given in previous step 
###########################################################################

# Apply timezone info
echo "Applying timezone info..."
if [ -f $tzinfopath ]; then
	ln -sf $(cat $tzinfopath) /etc/localtime
	# Run hwclock to generate /etc/adjtime:
	hwclock --systohc
else
	echo "Missing timezone info! Aborting..."
	exit 1
fi

# Apply locale info
# For me this will always be english, nothing else:
echo "Applying locale..."
#FIXME: There should be a more elegant way to make sed remove comment char:
sed 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen > /tmp/locale.gen 
sed 's/#da_DK.UTF-8 UTF-8/da_DK.UTF-8 UTF-8/' /tmp/locale.gen > /etc/locale.gen
rm /tmp/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo

###########################################################################
# Set keyboard type. For now, always to danish
###########################################################################

# Set keyboard type:
keyboardtype="dk-latin1"
echo "Setting keyboard layout to $keyboardtype"
echo "KEYMAP=$keyboardtype" > /etc/vconsole.conf
echo

###########################################################################
# Set the hostname to users preference 
###########################################################################

# Prompt for hostname:
proceed="no"
while [ $proceed == "no" ]; do
	read -p "Please enter the name of the computer: " hostname
	proceed="retry"
	while [ $proceed == "retry" ]; do
		echo -e "Is the name \"$hostname\" okay? [Y/n]:"
		read response
		if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
			proceed="yes"
		elif [ "${response,,}" == "n" ]; then
			proceed="no"		
		else
			echo "I did not understand that, please try again!"
			proceed="retry"
		fi
	done
done

echo "Writing hostname to /etc/hosts..."
echo "# Static table lookup for hostnames." > /etc/hosts
echo "# See hosts(5) for details." >> /etc/hosts
echo -e "127.0.0.1\tlocalhost" >> /etc/hosts
echo -e "::1\t\tlocalhost" >> /etc/hosts
echo -e "127.0.1.1\t$hostname.localdomain\t$hostname" >> /etc/hosts
if [ $devmode == "on" ]; then
	devips=("192.168.0.17" "192.168.0.18" "170.20.10.2" "170.20.10.3")
	for ip in "${!devips[@]}"; do
		echo "Checking for development pc on IP: ${devips[$ip]}"
		ping -c1 ${devips[$ip]} -W1 > /dev/null 2>&1
		connectioncheck=$?
		if [ $connectioncheck -eq 0 ]; then
			echo "Found connection on ${devips[$ip]}!"
			echo -e "${devips[$ip]}\t$devpc" >> /etc/hosts
		fi
	done
fi
echo "Done!"
echo

###########################################################################
# TIME TO INSTALL PACKAGES! 
###########################################################################

echo "TIME TO INSTALL PACKAGES!"
# First, the proper package repositories must be setup.

echo "Getting the newest mirrorlist..."
# Get the latest mirrorlist, with all, ranked best dl speed highest:
curl "https://www.archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on" > /etc/pacman.d/mirrorlist
# Remove comments on mirrorlist:
sed 's/^#//' /etc/pacman.d/mirrorlist > /tmp/mirrorlist
cp /tmp/mirrorlist /etc/pacman.d/mirrorlist

# Enable multilib:
echo "Enabling multilib..."
linetoedit=$(grep -n "\[multilib\]" /etc/pacman.conf | awk -F ':' '{print $1}')
sed "${linetoedit}s/^#//" /etc/pacman.conf > /tmp/pacman.conf 
linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
sed "${linetoedit}s/^#//" /tmp/pacman.conf > /etc/pacman.conf 

# Would you like to add sublime repo to pacman.conf:
proceed="retry"
while [ $proceed == "retry" ]; do
	echo -e "Would you like to add the sublime-text repo to /etc/pacman.conf? [Y/n]:"
	read response
	if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
		proceed="yes"
	elif [ "${response,,}" == "n" ]; then
		proceed="no"		
	else
		echo "I did not understand that, please try again!"
		proceed="retry"
	fi
done

if [ $proceed == "yes" ]; then
	# Install sublime key:
	curl -O https://download.sublimetext.com/sublimehq-pub.gpg && pacman-key --add sublimehq-pub.gpg && pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg

	# Check if it is already written to the config:
	grep "\[sublime-text\]" /etc/pacman.conf >/dev/null 2>&1
	retval=$?
	if [ $retval -ne 0 ]; then
		linetoedit=$(echo "$linetoedit" | awk -F ':' '{print $1 + 1}')
		sed -i "${linetoedit}i\ \n[sublime-text]\nServer = https://download.sublimetext.com/arch/dev/x86_64" /etc/pacman.conf
	fi
fi
echo

# Then update the pacman repos:
echo "Updating the pacman repos..."
pacman -Syu
echo

# Time to install the programs!
echo "Installing packages from pacman repos:"
pacman -S --needed - < "$packageslistpath"
echo

###########################################################################
# Add the first user: 
###########################################################################

proceed="no"
while [ $proceed == "no" ]; do
	echo -n "Add the first user. Please enter the username: "
	read username
	proceed="retry"
	while [ $proceed == "retry" ]; do
		echo -e "Is the name \"$username\" okay? [Y/n]:"
		read response
		if [ "${response,,}" == "y" ] || [ "${response,,}" == "" ]; then
			proceed="yes"
		elif [ "${response,,}" == "n" ]; then
			proceed="no"		
		else
			echo "I did not understand that, please try again!"
			proceed="retry"
		fi
	done
done

# Now we set up pikaur:
#echo "Setting up AUR helper pikaur..."
#pacman -S --needed git
#git clone https://aur.archlinux.org/pikaur.git
#(cd pikaur; makepkg -fsri)
#rm -r pikaur
#echo
# Install aur packages:
